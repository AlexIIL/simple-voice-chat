buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.maxhenkel.de/repository/public' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.12', changing: true
        classpath group: 'de.maxhenkel.forge-update', name: 'forge-update', version: '1.0.4'
    }
}

plugins {
    // https://github.com/matthewprenger/CurseGradle
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'forge-update'
apply plugin: 'idea'

archivesBaseName = project.archives_base_name
version = mod_version
group = mod_packagename

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

minecraft {
    mappings channel: 'official', version: mod_minecraft_version

    runs {
        client {
            Random rnd = new Random()
            workingDirectory project.file('run').canonicalPath
            property 'forge.logging.console.level', 'debug'
            args = ['--username', 'henkelmax' + rnd.nextInt(1000)]
            source sourceSets.main
            mods {
                mod_id {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run/server').canonicalPath
            property 'forge.logging.console.level', 'debug'
            source sourceSets.main
            mods {
                mod_id {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/')

            mods {
                mod_id {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeMod { transitive = false }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mod_minecraft_version}-${forge_version}"

    runtimeMod fg.deobf("de.maxhenkel.corelib:corelib:${mod_minecraft_version}-${corelib_version}")
    shadow fg.deobf("de.maxhenkel.corelib:corelib:${mod_minecraft_version}-${corelib_version}:api")
    compileOnly fg.deobf("de.maxhenkel.corelib:corelib:${mod_minecraft_version}-${corelib_version}")
    compileOnly fg.deobf("de.maxhenkel.corelib:corelib:${mod_minecraft_version}-${corelib_version}:javadoc")

    runtimeOnly 'de.maxhenkel.opus4j:opus4j:1.0.2'
    shadow 'de.maxhenkel.opus4j:opus4j:1.0.2'

    implementation 'com.google.code.findbugs:jsr305:3.0.2'
}

// https://github.com/Crimix/ServerTabInfo/blob/a297661ae5d40e082aecf3598d8467cfbef8e6d6/build.gradle
project.afterEvaluate {
    task copyMods {
        doLast {
            delete fileTree('run/mods') {
                include '*.jar'
            }
            delete fileTree('run/server/mods') {
                include '*.jar'
            }
            copy{
                from configurations.runtimeMod.files
                into file("run/mods")
            }
            copy{
                from configurations.runtimeMod.files
                into file("run/server/mods")
            }
        }
    }

    tasks.forEach {
        if (it.name.startsWith("prepareRun"))
            it.dependsOn copyMods
    }
}

jar {
    manifest {
        attributes(["Specification-Title"     : mod_name,
                    "Specification-Vendor"    : mod_vendor,
                    "Specification-Version"   : "1",
                    "Implementation-Title"    : mod_name,
                    "Implementation-Version"  : mod_version,
                    "Implementation-Vendor"   : mod_vendor,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}

processResources {
    filesMatching("**/*.toml") {
        expand 'mod_id': mod_id,
                'mod_version': mod_version,
                'mod_vendor': mod_vendor,
                'mod_name': mod_name,
                'mod_forge_version': mod_forge_version,
                'mod_minecraft_version': mod_minecraft_version
    }
}

curseforge {
    apiKey = System.env.CURSEFORGE_API_KEY != null ? System.env.CURSEFORGE_API_KEY : file('curseforge_api_key.txt').text
    project {
        id = curse_id
        changelogType = 'markdown'
        changelog = file('changelog.md')
        releaseType = curse_release_type
        addGameVersion mod_minecraft_version
        mainArtifact(jar) {
            displayName = "[FORGE][${mod_minecraft_version}] ${mod_name} ${mod_version}"
        }
    }
}

forgeUpdate {
    def messages = []
    file('changelog.md').eachLine { String line ->
        if (line.trim().startsWith('-')) {
            messages.add(line.replaceFirst('-', '').trim())
        }
    }

    serverURL = 'https://update.maxhenkel.de/'
    apiKey = file('forge_update_api_key.txt').exists() ? file('forge_update_api_key.txt').text : ''
    modID = mod_id
    gameVersion = mod_minecraft_version
    modVersion = mod_version
    updateMessages = messages
    releaseType = curse_release_type
    tags = recommended == 'true' ? ['recommended'] : []
}

repositories {
    mavenLocal()
    maven {
        name = "henkelmax.public"
        url = 'https://maven.maxhenkel.de/repository/public'
    }
}

javadoc {
    failOnError = false
}

task deobfJar(type: Jar) {
    classifier 'deobf'
    from sourceSets.main.output
    manifest {
        attributes(["Specification-Title"     : mod_name,
                    "Specification-Vendor"    : mod_vendor,
                    "Specification-Version"   : "1",
                    "Implementation-Title"    : mod_name,
                    "Implementation-Version"  : mod_version,
                    "Implementation-Vendor"   : mod_vendor,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}

task sourcesJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.getDestinationDir()
}

artifacts {
    archives deobfJar
    archives sourcesJar
    archives javadocJar
    archives shadowJar
}

jar.finalizedBy('reobfJar')

shadowJar {
    configurations = [project.configurations.shadow]
    classifier ''
    relocate 'de.maxhenkel.corelib', "de.maxhenkel.${mod_id}.corelib"
    relocate 'de.maxhenkel.opus4j', "de.maxhenkel.${mod_id}.opus4j"
    dependencies {
        exclude(dependency('net.java.dev.jna:jna'))
    }
}

reobf {
    shadowJar {}
}