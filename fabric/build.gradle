buildscript {
    repositories {
        mavenCentral()
        maven { url = 'https://maven.maxhenkel.de/repository/public' }
        mavenLocal()
    }
    dependencies {
        classpath group: 'de.maxhenkel.forge-update', name: 'forge-update', version: '1.0.4'
    }
}

plugins {
    id 'fabric-loom' version '0.8-SNAPSHOT'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

apply plugin: 'forge-update'

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = archives_base_name
version = mod_version
group = maven_group

minecraft {
    accessWidener = file('src/main/resources/voicechat.accesswidener')
}

repositories {
    mavenCentral()
    maven { url = 'https://maven.fabricmc.net/' }
    maven { url = 'https://maven.terraformersmc.com/' }
    maven {
        name = 'henkelmax.public'
        url = 'https://maven.maxhenkel.de/repository/public'
    }
    mavenLocal()
}

runClient.doFirst {
    args = ['--username', "henkelmax${new Random().nextInt(1000)}"]
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings minecraft.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    implementation project(':common')

    modImplementation "com.terraformersmc:modmenu:${modmenu_version}"

    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    implementation "de.maxhenkel.configbuilder:configbuilder:${configbuilder_version}"
    shadow "de.maxhenkel.configbuilder:configbuilder:${configbuilder_version}"

    implementation "de.maxhenkel.opus4j:opus4j:${opus4j_version}"
    shadow "de.maxhenkel.opus4j:opus4j:${opus4j_version}"

    implementation "de.maxhenkel.rnnoise4j:rnnoise4j:${rnnoise4j_version}"
    shadow "de.maxhenkel.rnnoise4j:rnnoise4j:${rnnoise4j_version}"
}

processResources {
    filesMatching("fabric.mod.json") {
        expand 'mod_id': mod_id,
                'mod_version': mod_version,
                'minecraft_dependency': minecraft_dependency,
                'loader_version': loader_version,
                'fabric_version': fabric_version,
                'compatibility_version': mod_compatibility_version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 16
}

tasks.withType(JavaCompile) {
    source(project(':common').sourceSets.main.allSource)
}

processResources {
    from("${project(':common').projectDir}/src/main/resources")
}

java {
    withSourcesJar()
}

jar {
    from('LICENSE') {
        rename { "${it}_${archivesBaseName}" }
    }
}

curseforge {
    apiKey = file("${rootDir}/curseforge_api_key.txt").exists() ? file("${rootDir}/curseforge_api_key.txt").text : ''
    project {
        id = curse_id
        changelogType = 'markdown'
        changelog = file("changelog.md")
        releaseType = curse_release_type
        addGameVersion curseforge_minecraft_version
        addGameVersion 'Fabric'
        mainArtifact(file("${buildDir}/libs/${archivesBaseName}-${version}.jar")) {
            displayName = "[FABRIC][${minecraft_version}] ${mod_name} ${mod_version}"
            relations {
                requiredDependency 'fabric-api'
                optionalDependency 'modmenu'
            }
        }
        afterEvaluate {
            uploadTask.dependsOn(remapJar)
        }
    }
    options {
        forgeGradleIntegration = false
    }
}

forgeUpdate {
    def messages = []
    file("changelog.md").eachLine { String line ->
        if (line.trim().startsWith('-')) {
            messages.add(line.replaceFirst('-', '').trim())
        }
    }

    serverURL = 'https://update.maxhenkel.de/'
    apiKey = file("${rootDir}/forge_update_api_key.txt").exists() ? file("${rootDir}/forge_update_api_key.txt").text : ''
    modID = mod_id
    gameVersion = minecraft_version
    modLoader = 'fabric'
    modVersion = mod_version
    updateMessages = messages
    releaseType = curse_release_type
    tags = recommended == 'true' ? ['recommended'] : []
}

shadowJar {
    configurations = [project.configurations.shadow]
    classifier 'shadow-dev'
    relocate 'de.maxhenkel.configbuilder', "de.maxhenkel.${mod_id}.configbuilder"
    relocate 'de.maxhenkel.opus4j', "de.maxhenkel.${mod_id}.opus4j"
    relocate 'de.maxhenkel.rnnoise4j', "de.maxhenkel.${mod_id}.rnnoise4j"
    dependencies {
        exclude(dependency('net.java.dev.jna:jna'))
    }
}

remapJar {
    dependsOn shadowJar
    input.set shadowJar.archiveFile.get()
}